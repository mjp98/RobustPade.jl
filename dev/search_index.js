var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = RobustPade","category":"page"},{"location":"#RobustPade","page":"Home","title":"RobustPade","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for RobustPade.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [RobustPade]","category":"page"},{"location":"#RobustPade.robustpade","page":"Home","title":"RobustPade.robustpade","text":"robustpade(     f::Function,     m::Integer,     n::Integer,     x::T=0.;     tol::Real=100eps(float(real(T))) ) where T<:Number\n\ncomputes the (m,n) Pade approximant to a function f using TaylorSeries.taylor_expand to compute the Taylor expansion.\n\n\n\n\n\n","category":"function"},{"location":"#RobustPade.robustpade-Union{Tuple{T}, Tuple{AbstractVector{T}, Integer, Integer}} where T<:Union{AbstractFloat, Complex{<:AbstractFloat}}","page":"Home","title":"RobustPade.robustpade","text":"robustpade(     coeffs::AbstractVector{T},     m::Integer,     n::Integer;     tol::Real=eps(float(real(T))) ) computes the (m,n) Pade approximant to a function with Taylor coefficients 'coeffs' using SVD following Parchon et al. SIAM Review.\n\nAdapted from the Chebfun implementation at https://github.com/chebfun/chebfun/blob/master/padeapprox.m (modified BSD license)\n\n\n\n\n\n","category":"method"}]
}
